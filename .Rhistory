A_sd <- seq(1000)
B_sd <- seq(1000)
C_sd <- seq(1000)
for (j in 1:1000){
a <- rnorm(500,0.0096,0.0459)
b <- rnorm(500,0.003,0.0026)
c <- seq(500)
for (i in 1:500){
c[i]=max(a[i],b[i])
}
A_sd[j]=sd(a)
B_sd[j]=sd(b)
C_sd[j]=sd(c)
}
A_sd
plot(x,C_sd,type = 'l', col = 4)
x <- seq(1000)
plot(x,A_sd,type = 'l',col = 2)
par(new=T)
plot(x,B_sd,type = 'l',col = 3)
par(new=F)
plot(x,C_sd,type = 'l', col = 4)
plot(x,A_sd,type = 'l',col = 2)
par(new=T)
plot(x,B_sd,type = 'l',col = 3)
par(new=F)
plot(x,C_sd,type = 'l', col = 4)
par(new=F)
plot(x,A_sd,type = 'l',col = 2)
par(new=T)
plot(x,B_sd,type = 'l',col = 3)
par(new=F)
plot(x,C_sd,type = 'l', col = 4)
par(new=F)
> plot(6:25,rnorm(20),type="b",xlim=c(1,30),ylim=c(-2.5,2.5),col=2)
> par(new=T)
> plot(rnorm(30),type="b",axes=F,col=3)
> par(new=F)
plot(6:25,rnorm(20),type="b",xlim=c(1,30),ylim=c(-2.5,2.5),col=2)
par(new=T)
plot(rnorm(30),type="b",axes=F,col=3)
par(new=F)
plot(x,A_sd,type = 'l',col = 2)
par(new=T)
plot(B_sd,type = 'l',col = 3)
par(new=F)
plot(C_sd,type = 'l', col = 4)
par(new=F)
plot(x,A_sd,type = 'l',col = 2)
par(new=T)
plot(B_sd,type = 'l',axes=F,col = 3)
par(new=F)
plot(C_sd,type = 'l',axes=F,col = 4)
par(new=F)
plot(6:25,rnorm(20),type="b",xlim=c(1,30),ylim=c(-2.5,2.5),col=2)
par(new=T)
plot(rnorm(30),type="b",axes=F,col=3)
par(new=F)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',axes=F,col = 3)
par(new=F)
plot(C_sd,type = 'l',axes=F,col = 4)
par(new=F)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',axes=F,col = 3)
par(new=F)
plot(C_sd,type = 'l',axes=F,col = 4)
par(new=F)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',axes=F,col = 3)
par(new=F)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',col = 3)
par(new=F)
plot(C_sd,type = 'l',axes=F,col = 4)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',col = 3)
par(new=F)
plot(C_sd,type = 'l',col = 4)
par(new=F)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',col = 3)
par(new=T)
plot(C_sd,type = 'l',col = 4)
z <- C_sd-B_sd
max(z)
levels(z)
summarys(z)
summary(z)
z <- C_sd-A_sd
summary(z)
plot(x,A_sd,type = 'l', xlim = c(1,1000),ylim = c(0,0.08),col = 2)
par(new=T)
plot(B_sd,type = 'l',col = 3)
par(new=T)
plot(C_sd,type = 'l',col = 4)
par(new=F)
plot(B_sd,type = 'l',col = 3)
par(new=T)
plot(C_sd,type = 'l',col = 4)
z <- C_sd-B_sd
summary(z)
z
sd(z)
A_sd
B_sd
c_sd
C_sd
0.0459**2+0.0026**2
sqrt(0.0459**2+0.0026**2)
cor(a,b)
sqrt(0.0459**2+0.0026**2-0.0531*0.0459*0.0026)
sqrt(0.0459**2+0.0026**2-2*0.0531*0.0459*0.0026)
library(zoo)
df_overlap <- data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
df_overlap$start
df_overlap$start[1]
install.packages('quantmod')
library(quantmod)
getSymbols("GOOG",src="yahoo")
View(GOOG)
View(GOOG)
getSymbols(c("AAPL","IBM","GOOG"),src="yahoo")
View(IBM)
from.dat <- as.Date("01/01/80", format="%m/%d/%y")
to.dat <- as.Date("07/30/09", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
View(GSPC)
from.dat <- as.Date("12/31/2016", format="%m/%d/%y")
to.dat <- as.Date("12/31/2016", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
from.dat <- as.Date("12/30/2016", format="%m/%d/%y")
to.dat <- as.Date("12/31/2016", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
View(GSPC)
from.dat <- as.Date("01/01/16", format="%m/%d/%y")
to.dat <- as.Date("07/30/16", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
View(GOOG)
View(GSPC)
from.dat <- as.Date("12/31/16", format="%m/%d/%y")
to.dat <- as.Date("12/31/16", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
View(GSPC)
from.dat <- as.Date("12/30/16", format="%m/%d/%y")
to.dat <- as.Date("12/31/16", format="%m/%d/%y")
getSymbols("^GSPC", src="yahoo", from = from.dat, to = to.dat)
View(GSPC)
from.dat <- as.Date("01/01/16", format="%m/%d/%y")
to.dat <- as.Date("12/31/16", format="%m/%d/%y")
getSymbols(c("AAPL","IBM","GOOG"), src="yahoo", from = from.dat, to = to.dat)
portfolio<-getSymbols(c("AAPL","IBM","GOOG"), src="yahoo", from = from.dat, to = to.dat)
View(GOOG)
GOOG$GOOG.open
View(GOOG)
GOOG$GOOG.Open
VaR(GOOG$GOOG.Open,p=0.95)
library(VaR)
install.packages('VaR')
VaR(GOOG$GOOG.Open,p=0.95)
library(VaR)
install.packages('PerformanceAnalytics')
VaR(GOOG$GOOG.Open,p=0.95)
data(edhec)
VaR(edhec, p=.95, method="historical")
help.VaR
library(PerformanceAnalytics)
VaR(GOOG$GOOG.Open,p=0.95)
VaR(GOOG$GOOG.Open[1],p=0.95)
VaR(GOOG$GOOG.Open[1],p=0.95,method="historical")
VaR(GOOG,p=0.95,method="historical")
Stocks = lapply(Symbols, function(sym) {
dailyReturn(na.omit(getSymbols(sym, from=StartDate, auto.assign=FALSE)))
})
Symbols<-c("AAPL","IBM","GOOG","BP","XOM","COST","GS")
Stocks = lapply(Symbols, function(sym) {
dailyReturn(na.omit(getSymbols(sym, from=StartDate, auto.assign=FALSE)))
})
Stocks = lapply(Symbols, function(x) x)
Stocks = lapply(Symbols, function(sym) {
dailyReturn(na.omit(getSymbols(sym, src="yahoo", from = from.dat, to = to.dat, auto.assign=FALSE)))
})
View(IBM)
View(Stocks)
portfolio<-getSymbols(Symbols, src="yahoo", from = from.dat, to = to.dat)
View(portfolio)
Symbols
portfolio<-getSymbols(c(Symbols), src="yahoo", from = from.dat, to = to.dat)
View(portfolio)
portfolio<-getSymbols(list(Symbols), src="yahoo", from = from.dat, to = to.dat)
portfolio<-getSymbols(c("AAPL","IBM","GOOG","BP","XOM","COST","GS"), src="yahoo", from = from.dat, to = to.dat)
do.call(merge, Stocks)
VaR(Stocks,p=0.95,method="historical")
library(quantmod)
library(zoo)
library(quantmod)
library(PerformanceAnalytics)
df_overlap <- data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
df_overlap$start[1]
Symbols<-c("AAPL","IBM","GOOG","BP","XOM","COST","GS")
from.dat <- as.Date("01/01/16", format="%m/%d/%y")
to.dat <- as.Date("12/31/16", format="%m/%d/%y")
portfolio<-getSymbols(c("AAPL","IBM","GOOG","BP","XOM","COST","GS"), src="yahoo", from = from.dat, to = to.dat)
Stocks = lapply(Symbols, function(sym) {
dailyReturn(na.omit(getSymbols(sym, src="yahoo", from = from.dat, to = to.dat, auto.assign=FALSE)))
})
VaR(Stocks,p=0.95,method="historical")
VaR(Stocks[1],p=0.95,method="historical")
Stocks[1]
Stocks[1][1]
VaR(Stocks[1],p=0.95,method="historical")
VaR(Stocks[daily.returns],p=0.95,method="historical")
Stocks[daily.returns]
VaR(Stocks$daily.returns,p=0.95,method="historical")
data(edhec)
View(edhec)
View(edhec)
VaR(edhec.returns,p=0.95,method="historical")
VaR(edhec,p=0.95,method="historical")
View(edhec)
colnames(Stocks) <- c("AAPL","IBM","GOOG","BP","XOM","COST","GS")
colnames(Stocks)
Stocks
do.call(merge, Stocks)
Stocks
Stocks.df <- do.call(merge, Stocks)
colnames(Stocks.df) <- c("AAPL","IBM","GOOG","BP","XOM","COST","GS")
View(Stocks.df)
VaR(Stocks.df,p=0.95,method="historical")
Weights<-c(0.15,0.2,0.2,0.15,0.1,0.15,0.05)
Stocks.df %*% Weights
portfolio.r <- Stocks.df %*% Weights
View(portfolio.r)
type(portfolio.r)
portfolio.r <- data.frame(Stocks.df %*% Weights)
View(portfolio.r)
portfolio.r <- data.frame(Stocks.df %*% Weights)
View(portfolio.r)
colnames(portfolio.r)
colnames(portfolio.r) <-"portfolio return"
portfolio.r_2 <- data.frame(mapply(`*`,Stocks.df,Weights))
View(portfolio.r_2)
View(Stocks.df)
Stocks.df[1]
Stocks.df[1]*weights
Stocks.df[1]*Weights
sum(Stocks.df[1]*Weights)
View(portfolio.r)
portfolio.r_2 <- data.frame(mapply(`%*%`,Stocks.df,Weights))
View(portfolio.r_2)
rownames(portfolio.r) <- rownames(Stocks.df)
portfolio.r <- data.frame(Stocks.df %*% Weights)
colnames(portfolio.r) <- "portfolio return"
rownames(portfolio.r) <- rownames(Stocks.df)
View(portfolio.r)
View(Stocks.df)
rownames(Stocks.df)
rownames(portfolio.r)
rownames(Stocks.df)
Stocks.df
rownames(Stocks.df)
Stocks.df[1]
Stocks.df$
colnames(Stocks.df)
Stocks.df[2016-07-26]
Stocks.df["2016-07-26"]
data.frame(mapply(`*`,Stocks.df,Weights,SIMPLIFY=FALSE))
x <- data.frame(mapply(`*`,Stocks.df,Weights,SIMPLIFY=FALSE))
View(x)
x <- data.frame(lapply(`%*%`,Stocks.df,Weights,SIMPLIFY=FALSE))
x <- data.frame(lapply(`%*%`,Stocks.df,Weights))
x <- data.frame(apply(`%*%`,Stocks.df,Weights))
x <- data.frame(apply(`*`,Stocks.df,Weights))
Weights
data.frame(mapply(`*`,Stocks.df,Weights))
x <- data.frame(apply(Stocks.df,1, function(x) x%*%Weights))
View(x)
portfolio.r <- data.frame(apply(Stocks.df,1, function(x) x%*%Weights))
View(portfolio.r)
colnames(portfolio.r) <- "portfolio return"
VaR(portfolio.r,p=0.95,method="historical")
ETL(portfolio.r,p=0.95,method="historical")
VaR(portfolio.r,p=0.95,method="gaussian")
ETL(portfolio.r,p=0.95,method="gaussian")
edhec[, 6,]
edhec[, 6]
edhec[, 7]
View(portfolio.r)
SharpeRatio(portfolio.r[,1,drop=FALSE], Rf=.035/12, FUN="StdDev")
SharpeRatio(portfolio.r, Rf=.035/12, FUN="StdDev")
portfolio.r[,1]
edhec[, 7]
portfolio.r
portfolio.r[,]
portfolio.r[,,drop=FALSE]
SharpeRatio(portfolio.r[,,drop=FALSE], Rf=.035/12, FUN="StdDev")
SharpeRatio(edhec[,6,drop=FALSE], Rf=.035/12, FUN="StdDev")
edhec[, 6]
portfolio.r[,,drop=FALSE]
x<-edhec[, 6]
y<-portfolio.r[,,drop=FALSE]
View(x)
View(y)
y<-as.xts(portfolio.r[,,drop=FALSE])
SharpeRatio(as.xts(portfolio.r[,,drop=FALSE]), Rf=.035/12, FUN="StdDev")
SharpeRatio(as.xts(portfolio.r[,,drop=FALSE]), Rf=0, FUN="StdDev")
SharpeRatio.annualized(as.xts(portfolio.r[,,drop=FALSE]), Rf=0, FUN="StdDev")
SharpeRatio.annualized(as.xts(portfolio.r[,,drop=FALSE]), Rf=0)
View(portfolio.r)
library(PortfolioAnalytics)
clear
clear
library(PortfolioAnalytics)
library(PerformanceAnalytics)
install.packages('PerformanceAnalytics')
install.packages("PerformanceAnalytics")
library(PortfolioAnalytics)
library(PortfolioAnalytics)
library(quantmod)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
library(zoo)
library(plotly)
install.packages('zoo')
install.packages('zoo')
install.packages("zoo")
library(zoo)
install.packages('PortfolioAnalytics')
library(PortfolioAnalytics)
install.packages('xts')
install.packages("xts")
library(PortfolioAnalytics)
library(zoo)
library(PortfolioAnalytics)
library(PortfolioAnalytics)
library(x)
library(xts)
install.packages('xts')
install.packages('PortfolioAnalytics')
install.packages('zoo')
install.packages("zoo")
library(zoo)
library(zoo)
library(zoo)
AB<-data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
View(AB)
AB$s=0;AB$w=NULL
AB_1=melt(AB,id.vars =c("id",'anest'))
ac=as.integer(AB_1$variable)
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(PortfolioAnalytics)
library(xts)
library(zoo)
library(quantmod)
library(PerformanceAnalytics)
library(ROI)
library(dplyr)
library(tidyr)
library(reshape2)
AB<-data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
AB$s=0;AB$w=NULL
AB_1=melt(AB,id.vars =c("id",'anest'))
ac=as.integer(AB_1$variable)
ac[ac==2]=-1
A_1<-cbind(AB_1,ac)[AB$anest=='dow',]
B_1<-cbind(AB_1,ac)[AB$anest=='baker',]
A_2<-A_1[order(A_1[,4],A_1[,1]),];A_2$stack=cumsum(c(A_2$ac))
B_2<-B_1[order(B_1[,4],B_1[,1]),];B_2$stack=cumsum(c(B_2$ac))
AB_2 <- rbind(A_2,B_2)
View(AB_1)
rm(list = ls())
library(ROI.plugin.glpk)
library(ROI.plugin.quadprog)
library(PortfolioAnalytics)
library(xts)
library(zoo)
library(quantmod)
library(PerformanceAnalytics)
library(ROI)
library(dplyr)
library(tidyr)
library(reshape2)
AB<-data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
AB$s=0;AB$w=NULL
View(AB)
AB_1=melt(AB,id.vars =c("id",'anest'))
View(AB_1)
ac=as.integer(AB_1$variable)
ac[ac==2]=-1
A_1<-cbind(AB_1,ac)[AB$anest=='dow',]
View(A_1)
B_1<-cbind(AB_1,ac)[AB$anest=='baker',]
A_2<-A_1[order(A_1[,4],A_1[,1]),];A_2$stack=cumsum(c(A_2$ac))
B_2<-B_1[order(B_1[,4],B_1[,1]),];B_2$stack=cumsum(c(B_2$ac))
AB_2 <- rbind(A_2,B_2)
l <- array()
for (i in 1:length(AB_2$id)){
if (AB_2$variable[i]=='start'){
l<-append(l,AB_2$id[i])}
else if (AB_2$variable[i]=='end'){
l<-l[!l %in% AB_2$id[i]]
}
AB_2$w[i]<- list(sort(l))
}
mid_true <- function(l){
which(l %in% TRUE)
}
for (i in AB$id){
s <- mid_true(AB_2$id==i)
AB$s[AB$id==i] <- max(AB_2$stack[s[1]:s[2]])
AB$w[AB$id==i] <- toString(sort(unique(unlist(AB_2$w[s[1]:s[2]]))))
}
View(AB)
rm(list = ls())
AB<-data.frame(id=seq(10,80,by=10),anest=c("baker","baker",rep("dow",6)), start=c("08:00","09:00","09:00","08:00","10:00","12:30","13:30","18:00"),end=c("11:00","13:00","15:30","13:30","11:30","13:30","14:30","19:00"))
AB_1=melt(AB,id.vars =c("id",'anest'))
ac=as.integer(AB_1$variable)
ac[ac==2]=-1
AB$s=0;AB$w=NULL
View(AB)
View(AB_1)
A_1<-cbind(AB_1,ac)[AB$anest=='dow',]
B_1<-cbind(AB_1,ac)[AB$anest=='baker',]
A_2<-A_1[order(A_1[,4],A_1[,1]),];A_2$stack=cumsum(c(A_2$ac))
B_2<-B_1[order(B_1[,4],B_1[,1]),];B_2$stack=cumsum(c(B_2$ac))
AB_2 <- rbind(A_2,B_2)
View(AB_2)
View(AB_1)
l <- array()
for (i in 1:length(AB_2$id)){
if (AB_2$variable[i]=='start'){
l<-append(l,AB_2$id[i])}
else if (AB_2$variable[i]=='end'){
l<-l[!l %in% AB_2$id[i]]
}
AB_2$w[i]<- list(sort(l))
}
mid_true <- function(l){
which(l %in% TRUE)
}
for (i in AB$id){
s <- mid_true(AB_2$id==i)
AB$s[AB$id==i] <- max(AB_2$stack[s[1]:s[2]])
AB$w[AB$id==i] <- toString(sort(unique(unlist(AB_2$w[s[1]:s[2]]))))
}
View(AB)
View(AB_2)
View(A_1)
View(A_2)
View(AB_2)
View(AB)
View(AB)
choose(5, 0:5)
net_pos <- pos %>%
group_by(user) %>%
summarise(net_pos = sum(pos))
###### Position calculator ######
setwd("C:/q/practice")
pos <- read.csv(file='pos.csv',head=TRUE,sep=",")
### Q1 Calculate the net position per each user
net_pos <- pos %>%
group_by(user) %>%
summarise(net_pos = sum(pos))
### Q2 Calculate the boxed position
box_pos <- pos %>% spread(sym, pos)
box_A_list <- colnames(box_pos)[!is.na(colnames(box_pos)[box_pos[1,]*box_pos[2,]<0])]
box_B_list <- colnames(box_pos)[!is.na(colnames(box_pos)[box_pos[3,]*box_pos[4,]<0])]
box_C_list <- colnames(box_pos)[!is.na(colnames(box_pos)[box_pos[5,]*box_pos[6,]<0])]
box_D_list <- colnames(box_pos)[!is.na(colnames(box_pos)[box_pos[7,]*box_pos[8,]<0])]
box_E_list <- colnames(box_pos)[!is.na(colnames(box_pos)[box_pos[9,]*box_pos[10,]<0])]
length(box_E_list) = length(box_D_list) = length(box_C_list) = length(box_B_list) = length(box_A_list)
total_list <- cbind(box_A_list,box_B_list,box_C_list,box_D_list,box_E_list)
### Q3 Calcualte journal and trade columns
View(box_pos)
View(pos)
View(pos)
trd <- read.csv(file='trd.csv',head=TRUE,sep=",")
trd <- trd[order(trd['sym']),]
trd_qty <- trd %>% spread(sym, qty)
# Sperate the negative and positive value and sum up, then append them to former trd_qty data frame
row_append <- as.matrix(vapply(trd_qty[,-1], function(x)  c(sum(x[x>0], na.rm=TRUE), -sum(x[x<=0], na.rm=TRUE)), double(2L)))
trd_qty <- rbind(trd_qty[,-1],row_append[1:2,])
row_trd <- vapply(trd_qty[6:7,], function(x) min(x), double(1L))
trd_qty <- rbind(trd_qty, row_trd)
# We make an assumption that when the order cannot be fully executed, we use pro rata to split the executed order
trd_qty[9,]<-lapply(trd_qty, function(X) X[8]/X[6])
trd_qty[10,]<-lapply(trd_qty, function(X) X[8]/X[7])
new_trd_qty <- cbind(user = c('A','B','C','D','E','po','neg','trd','po_ratio','neg_ratio'),trd_qty)
ratio.df <- new_trd_qty[9:10,] %>% gather(sym, qty, `1003.T`:`1984.T`)
# Implement the calculation: positive order * po_ratio and negative order * neg_ratio
for (i in (1:length(trd$sym))){
if (trd$qty[i]>0){
trd$jrnl[i]=trd$qty[i]*ratio.df[(ratio.df$sym==trd$sym[i]),]$qty[1]
trd$trd[i]=trd$qty[i] - trd$jrnl[i]
}
else if (trd$qty[i]<0){
trd$jrnl[i]=trd$qty[i]*ratio.df[(ratio.df$sym==trd$sym[i]),]$qty[2]
trd$trd[i]=trd$qty[i] - trd$jrnl[i]
}
}
View(trd_qty)
View(trd)
View(trd_qty)
View(ratio.df)
View(new_trd_qty)
