stock_raw <- read.csv('stock.csv')
stock <- stock_raw[,c(3,4,5)] %>% spread(tic, prccd)
stock <- rbind(stock, apply(stock, 2, function(x) length(which(!is.na(x)))))
max(stock[513,])
stock[513,].head()
head(stock[513,])
View(stock[513,])
max(stock[513,-1])
length(stock)
stock <- stock_raw[,c(3,4,5)] %>% spread(tic, prccd)
stock <- rbind(stock, apply(stock, 2, function(x) length(which(!is.na(x)))))
stock <- stock[,(stock[nrow(stock),]>(max(stock[nrow(stock),-1])-1))]
stock <- stock[-1,]
stock_new <- na.aggregate(stock)
cal_return<-function(x){
diff(x)/x[-length(x)]
}
stock_return<-na.aggregate(apply(stock_new, 2, cal_return))# Fix NA for return table
write.table(stock_return,'stock_return.csv',sep = ",")
X <- as.matrix(read.csv('stock_return.csv',header=T,sep=",")[,-1])
View(X)
View(stock_return)
View(stock_new)
View(stock)
xx <- complete.cases(stock_stock)
xx <- complete.cases(stock)
xx <- stock[complete.cases(stock)]
View(xx)
xx <- stock[complete.cases(stock),]
View(xx)
stock_new <- na.aggregate(stock[complete.cases(stock),])
setwd('C:\\Users\\Chandler\\Desktop\\Millennium')
stock_raw <- read.csv('stock.csv')
stock <- stock_raw[,c(3,4,5)] %>% spread(tic, prccd)
stock <- rbind(stock, apply(stock, 2, function(x) length(which(!is.na(x)))))
stock <- stock[,(stock[nrow(stock),]>(max(stock[nrow(stock),-1])-1))]
stock <- stock[-1,]
stock_new <- na.aggregate(stock[complete.cases(stock),])
cal_return<-function(x){
diff(x)/x[-length(x)]
}
stock_return<-na.aggregate(apply(stock_new, 2, cal_return))# Fix NA for return table
write.table(stock_return,'stock_return.csv',sep = ",")
X <- as.matrix(read.csv('stock_return.csv',header=T,sep=",")[,-1])
View(X)
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
View(return.raw)
View(stock_return)
write.table(stock_return,'stock_return.csv',sep = ",",col.names = TRUE)
View(stock_return)
stock_return<-na.aggregate(apply(stock_new[,-1], 2, cal_return))# Fix NA for return table
View(stock_return)
nrow(stock_return)
xx <- rbind(stock_return, stock_new[-1,1])
xx <- cbind(stock_return, stock_new[-1,1])
View(xx)
xx <- cbind(stock_new[-1,1],stock_return)
View(xx)
stock_return<-na.aggregate(apply(stock_new[,-1], 2, cal_return))# Fix NA for return table
stock_return <- cbind(stock_new[-1,1],stock_return)
write.table(stock_return,'stock_return.csv',sep = ",",col.names = TRUE)
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
View(return.raw)
mo <- strftime(return.raw[,'X'], "%m")
return.raw[,'X']
type(return.raw[,'X'])
mo <- strftime(as.POSIXct(return.raw[,'X']), "%m")
as.POSIXct(return.raw[,'X'])
typeof(return.raw[,'X'])
typeof(return.raw[1,'X'])
View(return.raw)
write.table(stock_return[-1,],'stock_return.csv',sep = ",",col.names = TRUE)
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
substr(return.raw[,'X'],1,5)
substr(return.raw[,'X'],1,6)
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
substr(return.raw[,'X'])
substr(return.raw[,'X'],1,6)
View(stock_return)
View(stock_raw)
View(return.raw)
stock_return[-1,]
stock_return[-1,1]
write.table(stock_return[-nrow(stock_return),],'stock_return.csv',sep = ",",col.names = TRUE)
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
substr(return.raw[,'X'],1,6)
return.raw$monthgroup <- substr(return.raw[,'X'],1,6)
return.raw$monthgroup <- list(substr(return.raw[,'X'],1,6))
return.raw$monthgroup <- as.list(substr(return.raw[,'X'],1,6))
return.raw$monthgroup <- unlist(substr(return.raw[,'X'],1,6))
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
xx<-unlist(substr(return.raw[,'X'],1,6))
xx<-list(substr(return.raw[,'X'],1,6))
View(return.raw)
return.raw <- cbind(substr(return.raw[,'X'],1,6),return.raw)
View(return.raw)
return.raw$V1
return.raw.colnames
View(return.raw)
return.raw$v1
return.raw$V1
return.raw[,1]
level(return.raw[,1])
levels(return.raw[,1])
unique(return.raw[,1])
month = "201501"
return.raw[,1]==month
X <- return.raw[return.raw[,1]==month]
X
View(X)
X <- return.raw[return.raw[,1]==month,]
View(X)
X <- return.raw[return.raw[,1]==month,c(-1,-2)]
View(X)
mu_r <-colMeans(X)
N <- nrow(X); n<-ncol(X)
View(X)
mu_r <-colMeans(X)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1)])
mu_r <-colMeans(X)
View(X)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
mu_r <-colMeans(X)
View(X)
XX <- as.matrix(read.csv('stock_return.csv',header=T,sep=",")])
XX <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
mu_r <-colMeans(X)
write.table(stock_return[-nrow(stock_return),],'stock_return.csv',sep = ",")
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=","))
return.raw <- cbind(substr(return.raw[,'X'],1,6),return.raw)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
mu_r <-colMeans(X)
View(X)
X <- as.numeric(as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)]))
mu_r <-colMeans(X)
X.isnumeric
is.numeric(X)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
is.numeric(X)
write.table(X,'X.csv',sep = ",")
View(return.raw)
colmeans(return.raw)
colMeans(return.raw)
colMeans(return.raw[,c(-1,-2)])
colMeans(return.raw[1,3:5])
colMeans(return.raw[1:3,3:5])
return.raw[1:3,3:5]
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=",",stringsAsFactors=FALSE))
return.raw[1:3,3:5]
View(return.raw)
return.raw <- cbind(substr(return.raw[,'X'],1,6),return.raw)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
colMeans(X)
View(X)
X[2:4,5:3]
return.raw[2:4,5:3]
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=",",stringsAsFactors=FALSE))
return.raw[2:4,5:3]
return.raw <- as.matrix(cbind(substr(return.raw[,'X'],1,6),return.raw))
return.raw[2:4,5:3]
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=",",stringsAsFactors=FALSE))
return.raw <- data.frame(substr(return.raw[,'X'],1,6,return.raw))
return.raw <- data.frame((substr(return.raw[,'X'],1,6),return.raw))
return.raw <- data.frame(substr(return.raw[,'X'],1,6),return.raw)
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
colMeans(X)
mu_r <-colMeans(X)
N <- nrow(X); n<-ncol(X)
Xbar <-na.aggregate(1/sqrt(N-1)*(X-matrix(1,nrow=N)%*%mu_r))
G<-as.matrix(Xbar)
G[is.infinite(G)] <-0 # replace all non-finite value with 0
rT<-t(colMeans(X))
rT[,is.infinite(rT)] <-0 # replace all non-finite value with 0
p <- nrow(G); n<-ncol(G)
w0 <- matrix(1/n, nrow=n) # initial holdings
t <- 1.005
SHORTSELLING <- 1 ;
prob <- list(sense="minimize")
prob$A <- rbind(
cbind(rT, Matrix(0, ncol=p+1)),
cbind(G,Matrix(0,nrow=p),-diag(p)),
cbind(Matrix(1,ncol=n),Matrix(0,ncol=p+1))
)
prob$c <- c(rep(0,n),1,rep(0,p));
prob$cones <- cbind(list('MSK_CT_QUAD',(n+1):(n+1+p)))
b<-c(t-rT%*%w0,-G%*%w0,0);
prob$bc<-rbind(b,b);
prob$bx<-matrix(c(-Inf,Inf),nrow=2,ncol=n+1+p);
if (SHORTSELLING==0){
prob$bx[1,]<-c(-w0,rep(-Inf,1+p));
}
prob$iparam <- list(LICENSE_WAIT = "MSK_ON");
res<-mosek(prob)
x<-res$sol$itr$xx[1:n];
View(X)
b
View(stock_return)
View(rT)
rT%*%w0
-G%*%w0
View(G)
View(G)
G%*%w0
G[,3:5]%*%w0[3:5]
G[,1:5]%*%w0[1:5]
G[,1:50]%*%w0[1:50]
G[,1:500]%*%w0[1:500]
write.table(G,'G.csv',sep = ",")
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
mu_r <-colMeans(X)
N <- nrow(X); n<-ncol(X)
Xbar <-na.aggregate(1/sqrt(N-1)*(X-matrix(1,nrow=N)%*%mu_r))
G<-as.matrix(Xbar)
G[is.infinite(G)] <-0 # replace all non-finite value with 0
rT<-t(colMeans(X))
rT[,is.infinite(rT)] <-0 # replace all non-finite value with 0
p <- nrow(G); n<-ncol(G)
w0 <- matrix(1/n, nrow=n) # initial holdings
t <- 1.005
SHORTSELLING <- 1 ;
prob <- list(sense="minimize")
prob$A <- rbind(
cbind(rT, Matrix(0, ncol=p+1)),
cbind(G,Matrix(0,nrow=p),-diag(p)),
cbind(Matrix(1,ncol=n),Matrix(0,ncol=p+1))
)
prob$c <- c(rep(0,n),1,rep(0,p));
prob$cones <- cbind(list('MSK_CT_QUAD',(n+1):(n+1+p)))
b<-c(t-rT%*%w0,-G%*%w0,0);
prob$bc<-rbind(b,b);
prob$bx<-matrix(c(-Inf,Inf),nrow=2,ncol=n+1+p);
if (SHORTSELLING==0){
prob$bx[1,]<-c(-w0,rep(-Inf,1+p));
}
prob$iparam <- list(LICENSE_WAIT = "MSK_ON");
res<-mosek(prob)
x<-res$sol$itr$xx[1:n];
f<-res$sol$itr$xx[n+1]
mean.variance.optimization <- function(X){
### Estimating the mean and variance
mu_r <-colMeans(X)
# Sigma_r <-cov(X,use='complete.obs')
# Normalize data−matrix for conic formulations of risk
N <- nrow(X); n<-ncol(X)
# Calculate the Xbar decomposition matrix and replace NA with approximated value
Xbar <-na.aggregate(1/sqrt(N-1)*(X-matrix(1,nrow=N)%*%mu_r))
G<-as.matrix(Xbar)
G[is.infinite(G)] <-0 # replace all non-finite value with 0
rT<-t(colMeans(X))
rT[,is.infinite(rT)] <-0 # replace all non-finite value with 0
p <- nrow(G); n<-ncol(G)
w0 <- matrix(1/n, nrow=n) # initial holdings
t <- 1.005
SHORTSELLING <- 1 ;
prob <- list(sense="minimize")
prob$A <- rbind(
cbind(rT, Matrix(0, ncol=p+1)),
cbind(G,Matrix(0,nrow=p),-diag(p)),
cbind(Matrix(1,ncol=n),Matrix(0,ncol=p+1))
)
prob$c <- c(rep(0,n),1,rep(0,p));
prob$cones <- cbind(list('MSK_CT_QUAD',(n+1):(n+1+p)))
b<-c(t-rT%*%w0,-G%*%w0,0);
prob$bc<-rbind(b,b);
prob$bx<-matrix(c(-Inf,Inf),nrow=2,ncol=n+1+p);
if (SHORTSELLING==0){
prob$bx[1,]<-c(-w0,rep(-Inf,1+p));
}
prob$iparam <- list(LICENSE_WAIT = "MSK_ON");
res<-mosek(prob)
x<-res$sol$itr$xx[1:n];
f<-res$sol$itr$xx[n+1]
return(x,f)
}
mean.variance.optimization(X)
result <- list(x,f)
mean.variance.optimization <- function(X){
### Estimating the mean and variance
mu_r <-colMeans(X)
# Sigma_r <-cov(X,use='complete.obs')
# Normalize data−matrix for conic formulations of risk
N <- nrow(X); n<-ncol(X)
# Calculate the Xbar decomposition matrix and replace NA with approximated value
Xbar <-na.aggregate(1/sqrt(N-1)*(X-matrix(1,nrow=N)%*%mu_r))
G<-as.matrix(Xbar)
G[is.infinite(G)] <-0 # replace all non-finite value with 0
rT<-t(colMeans(X))
rT[,is.infinite(rT)] <-0 # replace all non-finite value with 0
p <- nrow(G); n<-ncol(G)
w0 <- matrix(1/n, nrow=n) # initial holdings
t <- 1.005
SHORTSELLING <- 1 ;
prob <- list(sense="minimize")
prob$A <- rbind(
cbind(rT, Matrix(0, ncol=p+1)),
cbind(G,Matrix(0,nrow=p),-diag(p)),
cbind(Matrix(1,ncol=n),Matrix(0,ncol=p+1))
)
prob$c <- c(rep(0,n),1,rep(0,p));
prob$cones <- cbind(list('MSK_CT_QUAD',(n+1):(n+1+p)))
b<-c(t-rT%*%w0,-G%*%w0,0);
prob$bc<-rbind(b,b);
prob$bx<-matrix(c(-Inf,Inf),nrow=2,ncol=n+1+p);
if (SHORTSELLING==0){
prob$bx[1,]<-c(-w0,rep(-Inf,1+p));
}
prob$iparam <- list(LICENSE_WAIT = "MSK_ON");
res<-mosek(prob)
x<-res$sol$itr$xx[1:n];
f<-res$sol$itr$xx[n+1]
result <- list(x,f)
return(result)
}
mean.variance.optimization(X)
monthly.weight <- result[1]
monthly.weight <- data.frame(monthly.weight,result[1])
View(monthly.weight)
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format
monthly.weight <- data.frame(monthly.weight,result[1])
}
colnames(monthly.weight) <- unique(return.raw[,1])
View(monthly.weight)
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(monthly.weight,result[2])
}
colnames(monthly.weight) <- unique(return.raw[,1])
colnames(min.risk) <- unique(return.raw[,1])
View(min.risk)
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
colnames(monthly.weight) <- unique(return.raw[,1])
colnames(min.risk) <- unique(return.raw[,1])
View(min.risk)
View(monthly.weight)
result[2]
### Execuate optimzation process
# Define output variable
monthly.weight <- list()
min.risk <- list()
# Calculate the monthly rebalance weight and minimized risk
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format and save them to seperate data frame
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
monthly.weight <- data.frame(list())
min.risk <- data.frame(list())
# Calculate the monthly rebalance weight and minimized risk
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format and save them to seperate data frame
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
View(X)
View(return.raw)
colnames(return.raw)[3:]
colnames(return.raw)
colnames(return.raw)[c(-1,-2)]
monthly.weight <- data.frame(colnames(return.raw)[c(-1,-2)])
### Execuate optimzation process
# Define output variable
monthly.weight <- data.frame(colnames(return.raw)[c(-1,-2)])
min.risk <- data.frame("minimized.risk")
# Calculate the monthly rebalance weight and minimized risk
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format and save them to seperate data frame
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
colnames(monthly.weight) <- unique(return.raw[,1])
colnames(min.risk) <- unique(return.raw[,1])
View(min.risk)
View(monthly.weight)
colnames(monthly.weight) <- c(tICKER,unique(return.raw[,1]))
colnames(min.risk) <- c(Name,unique(return.raw[,1]))
colnames(monthly.weight) <- c("tICKER",unique(return.raw[,1]))
colnames(min.risk) <- c("Name",unique(return.raw[,1]))
View(min.risk)
View(monthly.weight)
c("TICKER",unique(return.raw[,1]))
unique(return.raw[,1])
colnames(monthly.weight) <- c("TICKER",toString(unique(return.raw[,1])))
colnames(min.risk) <- c("Name",toString(unique(return.raw[,1])))
View(min.risk)
unique(return.raw[,1])
typeof(unique(return.raw[,1]))
colnames(monthly.weight) <- c("TICKER",list(unique(return.raw[,1])))
View(monthly.weight)
colnames(monthly.weight) <- c("TICKER",as.Date(unique(return.raw[,1]),format("$Y%m")))
View(monthly.weight)
colnames(monthly.weight) <- c("TICKER",as.Date(unique(return.raw[,1]),format("%Y%m")))
View(monthly.weight)
as.Date(unique(return.raw[,1]),format("%Y%m"))
unique(return.raw[,1])
colnames(monthly.weight) <- c("TICKER",as.Date(as.numeric(unique(return.raw[,1]),format("%Y%m"))))
View(monthly.weight)
as.numeric(unique(return.raw[,1]),format("%Y%m"))
as.character(unique(return.raw[,1]),format("%Y%m"))
colnames(monthly.weight) <- c("TICKER",as.character(unique(return.raw[,1]),format("%Y%m")))
View(monthly.weight)
colnames(min.risk) <- c("Name",as.character(unique(return.raw[,1])))
View(min.risk)
colSums(monthly.weight)
View(monthly.weight)
colSums(monthly.weight[:,-1])
colSums(monthly.weight[,-1])
ptm <- proc.time()
### Execuate optimzation process
# Define output variable
monthly.weight <- data.frame(colnames(return.raw)[c(-1,-2)])
min.risk <- data.frame("minimized.risk")
# Calculate the monthly rebalance weight and minimized risk
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format and save them to seperate data frame
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
colnames(monthly.weight) <- c("TICKER",as.character(unique(return.raw[,1]),format("%Y%m")))
colnames(min.risk) <- c("Name",as.character(unique(return.raw[,1])))
proc.time() - ptm
ptm <- proc.time()
### Read the data from csv file
return.raw <- as.matrix(read.csv('stock_return.csv',header=T,sep=",",
stringsAsFactors=FALSE))
# Append the month-year indicator for monthly balance
return.raw <- data.frame(substr(return.raw[,'X'],1,6),return.raw)
### Define the mean variance optimization function, using conic quodratic optimization
mean.variance.optimization <- function(X){
### Estimating the mean and variance
mu_r <-colMeans(X)
# Sigma_r <-cov(X,use='complete.obs')
# Normalize data−matrix for conic formulations of risk
N <- nrow(X); n<-ncol(X)
# Calculate the Xbar decomposition matrix and replace NA with approximated value
Xbar <-na.aggregate(1/sqrt(N-1)*(X-matrix(1,nrow=N)%*%mu_r))
G<-as.matrix(Xbar)
G[is.infinite(G)] <-0 # replace all non-finite value with 0
rT<-t(colMeans(X))
rT[,is.infinite(rT)] <-0 # replace all non-finite value with 0
p <- nrow(G); n<-ncol(G)
w0 <- matrix(1/n, nrow=n) # initial holdings
t <- 1.005 # Expected return
# We assume we can do short selling
SHORTSELLING <- 1 ;
prob <- list(sense="minimize")
# Build up the conic optimization problem
prob$A <- rbind(
cbind(rT, Matrix(0, ncol=p+1)),
cbind(G,Matrix(0,nrow=p),-diag(p)),
cbind(Matrix(1,ncol=n),Matrix(0,ncol=p+1))
)
# Define boundary and constraint
prob$c <- c(rep(0,n),1,rep(0,p));
prob$cones <- cbind(list('MSK_CT_QUAD',(n+1):(n+1+p)))
b<-c(t-rT%*%w0,-G%*%w0,0); # Set expected return and min risk constraint
prob$bc<-rbind(b,b);
prob$bx<-matrix(c(-1,1),nrow=2,ncol=n+1+p); # no leverage
if (SHORTSELLING==0){
prob$bx[1,]<-c(-w0,rep(-1,1+p));
}
# Do mosek optimization
prob$iparam <- list(LICENSE_WAIT = "MSK_ON");
res<-mosek(prob)
x<-res$sol$itr$xx[1:n];
f<-res$sol$itr$xx[n+1]
result <- list(x,f)
return(result)
}
### Execuate optimzation process
# Define output variable
monthly.weight <- data.frame(colnames(return.raw)[c(-1,-2)])
min.risk <- data.frame("minimized.risk")
# Calculate the monthly rebalance weight and minimized risk
for (month in unique(return.raw[,1])){
X <- as.matrix(return.raw[return.raw[,1]==month,c(-1,-2)])
X[is.infinite(X)] <-0 # get rid of infinite element
result <- mean.variance.optimization(X)
# clean the output format and save them to seperate data frame
monthly.weight <- data.frame(monthly.weight,result[1])
min.risk <- data.frame(min.risk,result[2])
}
colnames(monthly.weight) <- c("TICKER",as.character(unique(return.raw[,1]),format("%Y%m")))
colnames(min.risk) <- c("Name",as.character(unique(return.raw[,1])))
proc.time() - ptm
